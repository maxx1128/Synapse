// Function to get deeper map values in the mixin
// Used to get setting values in the mixin
@function map-deep-get($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}

// Function to add generated map values for padding and margin to the utilities map
@function map-set($name, $property, $value, $map) {
  $new: (
    $name: (
      property: $property,
      value: $value
    )
  );
  @return map-merge($map, $new);
}

@function prepend($list, $value) {
  @return join($value, $list);
}

// An example of how to configure Synapse's settings for the grid
$synapse: (
  columns: 12,
  layouts: (
        xs:  0px,
        sm:  480px, 
        md:  787px,
        lg: 1024px,
        xlg: 1200px
    ),
  spaceUnits: (8px, 1em, 2em, 3em, 4em),
  side-margin: 1em
);

// List of all basic utilities, easy to edit.
// The same of each sub-map is the utility name to reference in the mixin
// The properties and values are the utilities' CSS components
$utilitiesList: (
    align-c: ( 
      property: text-align,
      value: center
    ),
    align-l: ( 
      property: text-align,
      value: left
    ),
    align-r: ( 
      property: text-align,
      value: right
    ),
    float-r: ( 
      property: float,
      value: right
    ),
    float-l: ( 
      property: float,
      value: left
    ),
    float-n: ( 
      property: float,
      value: none
    ),
    border-b: (
      property: box-sizing,
      value: border-box
    ),
    hide: (
      property: display,
      value: none !important
    )
  );

// Get a list of spacing variables from the settings
$spacing: map-get($synapse, spaceUnits);
$full-spacing: $spacing;

// Loop through the spacing settings and generate all the utilities 
// for padding and margin placement
@each $size in $spacing {
   $i: index($spacing, $size);
  
  $utilitiesList: map-set(pad-0, padding, 0, $utilitiesList);
  $utilitiesList: map-set(pad-#{$i}, padding, $size, $utilitiesList);
  $utilitiesList: map-set(pad-t-#{$i}, padding-top, $size, $utilitiesList);
  $utilitiesList: map-set(pad-r-#{$i}, padding-right, $size, $utilitiesList);
  $utilitiesList: map-set(pad-b-#{$i}, padding-bottom, $size, $utilitiesList);
  $utilitiesList: map-set(pad-l-#{$i}, padding-left, $size, $utilitiesList);

  $utilitiesList: map-set(marg-0, margin, 0, $utilitiesList);
  $utilitiesList: map-set(marg-#{$i}, margin, $size, $utilitiesList);
  $utilitiesList: map-set(marg-t-#{$i}, margin-top, $size, $utilitiesList);
  $utilitiesList: map-set(marg-r-#{$i}, margin-right, $size, $utilitiesList);
  $utilitiesList: map-set(marg-b-#{$i}, margin-bottom, $size, $utilitiesList);
  $utilitiesList: map-set(marg-l-#{$i}, margin-left, $size, $utilitiesList);

}

@mixin column-basics($breakpointWidth, $widthPer, $sideMargin, $utilities, $offset, $columns, $totalColumns) {
  
  @if ($columns == $totalColumns) {
    width: 100%;
  } @elseif ($columns != 0) {
    width: -webkit-calc(#{$widthPer} - #{$sideMargin});
    width: -moz-calc(#{$widthPer} - #{$sideMargin});
    width: calc(#{$widthPer} - #{$sideMargin});
  }
  
  @if ($utilities != '') {
    @for $i from 1 through length($utilities) {
      $utilityName: nth($utilities, $i);
      
      @if ($utilityName == 'col') {
        
        margin-right: $sideMargin/2;
        margin-left: $sideMargin/2;
        box-sizing: border-box;
        
        @if ($breakpointWidth != 0) {
          float: left;
        }
        
      } @elseif ($utilityName == 'no-col') {
        margin-right: 0;
        margin-left: 0;
        float: none;
      } @else {
        
        $property: map-deep-get($utilitiesList, $utilityName, "property");
        $value: map-deep-get($utilitiesList, $utilityName, "value");
      
        #{$property}: $value;
        
      }
    }
  }
  
  @if ($offset != 0) and ($columns != 0) {
    margin-left: percentage($offset/$totalColumns);
  }
}

// Setup for the actual synapse mixin
@mixin syn($breakpoint, $columns, $offset, $utilities: none) {
    // The width of the breakpoint specificied
    $breakpointWidth: map-deep-get($synapse, "layouts", $breakpoint);
    // The total number of columns from the settings
    $totalColumns: map-get($synapse, "columns");
    $sideMargin: map-get($synapse, "side-margin");
    
    $widthPer: percentage($columns/$totalColumns); 

    
    // Sets up the media query and adds the basic grid properties and
    // width based on the number of columns in the mixin

      

    @if ($breakpointWidth == 0 ) {
      
      @include column-basics($breakpointWidth, $widthPer, $sideMargin, $utilities, $offset, $columns, $totalColumns);
      
    } @else {
      
      @media screen and (min-width: $breakpointWidth) {
        
        @include column-basics($breakpointWidth, $widthPer, $sideMargin, $utilities, $offset, $columns, $totalColumns);
      }
      
    }
}